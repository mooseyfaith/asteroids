#if defined VERTEX_SHADER
  #define FRAG_IN out
#else
  #version 150
  #define FRAG_IN in
#endif

FRAG_IN vec2 f_position;

#if defined VERTEX_SHADER

in vec2 a_position;

void main() {
	f_position = a_position;
	gl_Position = vec4(a_position, 0.999999f, 1.0f);
}

#else

uniform mat4 u_clip_to_world_projection;
uniform vec3 u_camera_world_position;

out vec4 out_color;

void main() {
	vec3 dir = normalize((u_clip_to_world_projection * vec4(f_position, 1.0f, 1.0f)).xyz);// - u_camera_world_position);
	float d = dot(dir, vec3(0.0f, 1.0f, 0.0f));

	float p = 16;

	vec3 up_color = vec3(0.49, 0.66, 0.99);
//	vec3 up_color = vec3(0.35, 0.43, 0.5);
//	vec3 up_color = vec3(0.18, 0.22, 0.25);

//	vec3 down_color = vec3(0.79f, 0.78f, 0.21f);
//	vec3 down_color = vec3(0.99f, 0.82f, 0.49f);
	vec3 down_color = vec3(0.66f, 0.99f, 0.49f);

	vec3 mid_color = vec3(1.0f);
//	vec3 mid_color = (up_color + down_color) * 0.5f;

#if 1
	vec3 color;
	if (d >= 0.0f) {
		d = 1 - pow(1 - d, p);
		color = up_color * d + mid_color * (1.0f - d);
    }
    else {
		d = 1 - pow(1 + d, p);
		color = down_color * d + mid_color * (1.0f - d);
    } 
#else

	d = (d + 1) * 0.5;
	d = -2 * d * d * d + 3 * d * d;
	vec3 color = up_color * d + down_color * (1 - d);
#endif

    out_color = vec4(color, 1.0f);
}

#endif