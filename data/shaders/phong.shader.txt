
#if defined VERTEX_SHADER

#  define VERTEX_OUT out

#elif defined FRAGMENT_SHADER

#  define VERTEX_OUT in

#else

#error define VERTEX_SHADER or FRAGMENT_SHADER befor makeing a shader object

#endif

uniform mat4   u_camera_to_clip_projection;
uniform mat4x3 u_world_to_camera_transform;
uniform mat4x3 u_object_to_world_transform;
uniform vec3   u_camera_world_position;

uniform vec4 u_ambient_color;
uniform vec4 u_diffuse_color;
uniform sampler2D u_diffuse_texture;
uniform sampler2D u_normal_map;

#if defined VERTEX_SHADER

in vec3 a_position;
in vec3 a_normal;
in vec3 a_tangent;
in vec2 a_uv;
in vec4 a_bone_indices; // somehow it doesn't like integer uvec4 -.-, why gl why?
in vec4 a_bone_weights;

#endif

VERTEX_OUT vec3 world_position;
VERTEX_OUT vec3 world_normal;
VERTEX_OUT vec3 world_tangent;
VERTEX_OUT vec2 uv;
VERTEX_OUT vec3 camera_direction;

#if defined MAX_LIGHT_COUNT
uniform vec3 u_light_world_positions[MAX_LIGHT_COUNT];
uniform vec4 u_light_diffuse_colors[MAX_LIGHT_COUNT];
uniform vec4 u_light_specular_colors[MAX_LIGHT_COUNT];
uniform uint u_light_count;

VERTEX_OUT vec3 light_distances[MAX_LIGHT_COUNT];
#endif

#if defined MAX_BONE_COUNT
uniform mat4x3 u_bone_transforms[MAX_BONE_COUNT];
#endif

#if defined FRAGMENT_SHADER
out vec4 out_color;
#endif

// common functions

vec3 transformed_direction(mat3 world_to_tangent_transform, vec3 direction)
{
#if !(defined WITH_NORMAL_MAP) || ((defined VERTEX_SHADER) == (defined TANGENT_TRANSFORM_PER_FRAGMENT))
	return direction;
#else
	return world_to_tangent_transform * direction;
#endif
}


#if defined VERTEX_SHADER

///////////////////////////////////////////////////////////////////////////////
//  VERTEX_SHADER                                                            // 
///////////////////////////////////////////////////////////////////////////////

void main() {

#if defined MAX_BONE_COUNT

	world_position = vec3(0.0);
	world_normal   = vec3(0.0);
	world_tangent  = vec3(0.0);
	
	for (int i = 0; i < 4; ++i)
	{
		uint index = uint(a_bone_indices[i]);
		world_position += (u_bone_transforms[index] * vec4(a_position, 1.0)) * a_bone_weights[i];
		world_normal   += (u_bone_transforms[index] * vec4(a_normal,   0.0)) * a_bone_weights[i];
		tangent        += (u_bone_transforms[index] * vec4(a_tangent,  0.0)) * a_bone_weights[i];	
	}

#else

	world_position = a_position;
	world_normal   = a_normal;
	world_tangent  = a_tangent;

#endif

	world_position = u_object_to_world_transform * vec4(world_position, 1.0);
	world_normal   = u_object_to_world_transform * vec4(world_normal,   0.0);
	world_tangent  = u_object_to_world_transform * vec4(world_tangent,  0.0);

	mat3 world_to_tangent_transform = transpose(mat3(
        normalize(world_tangent),
        normalize(cross(world_normal, world_tangent)),
        normalize(world_normal)
    ));

#if defined MAX_LIGHT_COUNT
	for (uint light_index = uint(0); light_index < u_light_count; ++light_index)
	{
		light_distances[light_index] = transformed_direction(world_to_tangent_transform, u_light_world_positions[light_index] - world_position);
	}
#endif

	camera_direction = transformed_direction(world_to_tangent_transform, u_camera_world_position - world_position);

	uv = a_uv;

	gl_Position = u_camera_to_clip_projection * vec4(u_world_to_camera_transform * vec4(world_position, 1.0), 1.0);
}

#endif



#if defined FRAGMENT_SHADER

///////////////////////////////////////////////////////////////////////////////
//  FRAGMENT_SHADER                                                          // 
///////////////////////////////////////////////////////////////////////////////

void main() {

	vec4 diffuse_color  = u_ambient_color;
	vec4 specular_color = vec4(0);

#if defined WITH_NORMAL_MAP
	vec3 normal = normalize(texture(u_normal_map, uv).xyz * 2  - 1);
#else
	vec3 normal = normalize(world_normal);
#endif

	mat3 world_to_tangent_transform = transpose(mat3(
        normalize(world_tangent),
        normalize(cross(world_normal, world_tangent)),
        normalize(world_normal)
    ));

	vec3 camera_dir = normalize(transformed_direction(world_to_tangent_transform, camera_direction));

#if defined MAX_LIGHT_COUNT
	
	// TODO,MAYBE: optional per vertex lighting - tafil, 21.07.2018
	for (uint light_index = uint(0); light_index < u_light_count; ++light_index)
	{		
		vec3 light_distance = light_distances[light_index];
		vec3 light_dir = normalize(transformed_direction(world_to_tangent_transform, light_distance));

		vec3 r = (normal * (2.0 * dot(light_dir, normal)) - light_dir);

		float attenuation = 1.0 / (1 + 0.25 * dot(light_distance, light_distance));

		float intensity = max(0.0, dot(normal, light_dir));

		diffuse_color  += u_light_diffuse_colors[light_index]  * intensity;	
		specular_color += u_light_specular_colors[light_index] * pow(max(0.0, dot(camera_dir, r)), 4) * (1.0 - step(intensity, 0.0));
	}

#else

	diffuse_color = vec4(1);

#endif

#if defined WITH_DIFFUSE_TEXTURE
	diffuse_color *= texture(u_diffuse_texture, uv); 
#endif

#if defined WITH_DIFFUSE_COLOR
	diffuse_color *= u_diffuse_color;
#endif

	out_color = diffuse_color + specular_color;

	// for debuging
	//out_color = vec4(normal * 0.5 + 0.5, 1.0);
	//out_color = vec4(normalize(light_directions[0]) * 0.5 + 0.5, 1.0);
	//out_color = vec4(normalize(camera_direction) * 0.5 + 0.5, 1.0);
}


#endif
